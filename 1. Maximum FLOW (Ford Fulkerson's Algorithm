class Graph:
	def __init__(self,graph):
		self.graph=graph
		self.Row=len(graph)

	def BFS(self,s,t,parent):

		visited=[False]*(self.Row)
		queue=[]
		queue.append(s)
		visited[s]=True

		while queue:
			u=queue.pop(0)
			
			for ind,val in enumerate(self.graph[u]):
				if visited[ind]==False and val>0:
					queue.append(ind)					
					visited[ind]=True
					parent[ind]= u
		return True if visited[t]==True else False
    
	def fordfulkerson(self, source, sink):

		max_flow= 0
		parent=[-1]*(self.Row)
		count=0
		while self.BFS(source,sink,parent):
			count+=1
			path_flow=float("inf")
			s=sink
			while(s!=source):
				path_flow=min(path_flow,self.graph[parent[s]][s])
				s=parent[s]
			
			max_flow += path_flow		
			v=sink
			while(v!=source):
				u=parent[v]
				self.graph[u][v] -= path_flow
				self.graph[v][u] += path_flow
				v=parent[v]
			
			print(" STAGE: {} ".format(count))
			print ("max flow at this stage:{}".format(max_flow))
			print ("path flow of this stage: {}".format(path_flow))
			print("Residual Graph:")
			for x in self.graph:
				print x
		return max_flow

graph=[[0,3,0,5,0,2,0,0],
	[0,0,2,0,0,0,0,4],
	[0,0,0,0,2,0,0,3],
	[0,0,0,0,4,3,0,0],
	[0,5,0,0,0,0,0,0],
	[0,0,0,0,0,0,4,0],
	[0,0,0,0,2,0,0,3],
	[0,0,0,0,0,0,0,0]]

g=Graph(graph)

source = int(input("Enter source: "))
sink = int(input("Enter sink: "))
print( "Maximum possible network flow is: {}".format(g.fordfulkerson(source, sink)))
